name: Publish Anytask image to Cotainer registry

on: [push, workflow_dispatch]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:  
    needs: publish
    name: deploy image
    runs-on: ubuntu-latest
    environment:
        name: ${{ (github.event_name == 'push' && github.ref_type == 'branch') && 'staging' || 'production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Deploy
        env:
            IMAGE: ${{ steps.meta.outputs.tags }}
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          cd docker
          echo "${{ secrets.APP_ENV }}" > env.app
          echo "${{ secrets.IPYTHON_ENV }}" > env.ipython
          echo "${{ secrets.MARIADB_ENV }}" > env.mariadb
          echo "${{ secrets.RB_ENV }}" > env.rb
          echo "${{ secrets.EASYCI_ENV }}" > env.easyCI2

          docker compose config | ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} docker compose -f - pull
          docker compose config | ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} docker compose -f - down
          docker compose config | ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} docker compose -f - rm -f -s
          docker compose config | ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} docker compose -f - up -d --build

        
        